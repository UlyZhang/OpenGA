package homework.schedule;

/**
 * <p>Title: The parallel machine scheduling problem is to generate an initial sequence by using
 * the Dominance Property of single machine problem. </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2006</p>
 * <p>Company: </p>
 * @author Shih-Hsin Chen
 * @version 1.0
 */

public class parallelMachineWithDP extends singleMachine{
  public parallelMachineWithDP() {
  }

  public static void main(String[] args) {
    parallelMachineWithDP parallelMachineWithDP1 = new parallelMachineWithDP();
    int jobSets[] = new int[]{35, 50, 65, 80};
    int numberOfMachines[] = new int[]{7, 10, 13, 16};

    for(int replications = 0 ; replications < 30 ; replications ++ ){
      for(int m = 0 ; m < jobSets.length ; m ++ ){//jobSets.length
          int k = 0;
          homework.util.readSingleMachineData readSingleMachineData1 = new homework.util.readSingleMachineData();
          int numberOfJobs = jobSets[m];
          String fileName = readSingleMachineData1.getFileName(numberOfJobs, k);
          //fileName = "bky"+numberOfJobs+"_1";
          System.out.print(fileName+"\t");
          readSingleMachineData1.setData("sks/"+fileName+".txt");
          readSingleMachineData1.getDataFromFile();

          int obj = Integer.MAX_VALUE;
          int dueDate[] = readSingleMachineData1.getDueDate();
          int processingTime[] = readSingleMachineData1.getPtime();
          int currentSoluion[] = new int[numberOfJobs];
          homework.util.timeClock timeClock1 = new homework.util.timeClock();
          timeClock1.start();
          for(int i = 0 ; i < 100 ; i ++ ){//i initial solutions
            int sequence[] = new int[numberOfJobs];//5, 3, 2, 1, 4//2 1 4 6 3 5 8 7
            for(int j = 0 ; j < numberOfJobs ; j ++ ){
              sequence[j] = j;
            }
            parallelMachineWithDP1.setData(numberOfJobs, dueDate, processingTime, sequence);
            parallelMachineWithDP1.generateInitialSolution(i);
            parallelMachineWithDP1.startAlgorithm();
            //to compare the objective value.
            if(obj > parallelMachineWithDP1.getObjValue()){
              obj = parallelMachineWithDP1.getObjValue();
              currentSoluion = parallelMachineWithDP1.getSolution();
            }
          }
          timeClock1.end();
          String result = obj+"\t"+timeClock1.getExecutionTime()/1000.0+"\n";
          System.out.print(result);
          parallelMachineWithDP1.writeFile("singleMachineProperties20060520", result);

      }
    }//end replications.

  }
}